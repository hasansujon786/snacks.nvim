*snacks-image.txt*                                                 snacks.nvim

==============================================================================
Table of Contents                             *snacks-image-table-of-contents*

1. Setup                                                  |snacks-image-setup|
2. Config                                                |snacks-image-config|
3. Types                                                  |snacks-image-types|
4. Module                                                |snacks-image-module|
  - Snacks.image.attach()          |snacks-image-module-snacks.image.attach()|
  - Snacks.image.dim()                |snacks-image-module-snacks.image.dim()|
  - Snacks.image.env()                |snacks-image-module-snacks.image.env()|
  - Snacks.image.markdown()      |snacks-image-module-snacks.image.markdown()|
  - Snacks.image.new()                |snacks-image-module-snacks.image.new()|
  - Snacks.image.request()        |snacks-image-module-snacks.image.request()|
  - Snacks.image.supports()      |snacks-image-module-snacks.image.supports()|
  - Snacks.image.supports_file()|snacks-image-module-snacks.image.supports_file()|
  - Snacks.image.supports_terminal()|snacks-image-module-snacks.image.supports_terminal()|
  - image:close()                          |snacks-image-module-image:close()|
  - image:convert()                      |snacks-image-module-image:convert()|
  - image:create()                        |snacks-image-module-image:create()|
  - image:debug()                          |snacks-image-module-image:debug()|
  - image:hide()                            |snacks-image-module-image:hide()|
  - image:ready()                          |snacks-image-module-image:ready()|
  - image:render_fallback()      |snacks-image-module-image:render_fallback()|
  - image:render_grid()              |snacks-image-module-image:render_grid()|
  - image:set_cursor()                |snacks-image-module-image:set_cursor()|
  - image:state()                          |snacks-image-module-image:state()|
  - image:update()                        |snacks-image-module-image:update()|
  - image:wins()                            |snacks-image-module-image:wins()|
5. Links                                                  |snacks-image-links|
Image viewer using the Kitty Graphics Protocol
<https://sw.kovidgoyal.net/kitty/graphics-protocol/>.

Supported terminals:

- kitty <https://sw.kovidgoyal.net/kitty/>
- wezterm <https://wezfurlong.org/wezterm/>
- ghostty <https://ghostty.org/>

In order to automatically display the image when openinng an image file, you
need to enable the `image` plugin in your `snacks` config.

Supported image formats:

- PNG
- JPEG/JPG
- GIF
- BMP
- WEBP

ImageMagick <https://imagemagick.org/index.php> is required to convert images
to the supported formats (all except PNG).


==============================================================================
1. Setup                                                  *snacks-image-setup*

>lua
    -- lazy.nvim
    {
      "folke/snacks.nvim",
      ---@type snacks.Config
      opts = {
        image = {
          -- your image configuration comes here
          -- or leave it empty to use the default settings
          -- refer to the configuration section below
        }
      }
    }
<


==============================================================================
2. Config                                                *snacks-image-config*

>lua
    ---@class snacks.image.Config
    ---@field wo? vim.wo|{} options for windows showing the image
    ---@field bo? vim.bo|{} options for the image buffer
    ---@field formats? string[]
    --- Resolves a reference to an image with src in a file (currently markdown only).
    --- Return the absolute path or url to the image.
    --- When `nil`, the path is resolved relative to the file.
    ---@field resolve? fun(file: string, src: string): string?
    {
      formats = { "png", "jpg", "jpeg", "gif", "bmp", "webp", "tiff", "heic", "avif", "mp4", "mov", "avi", "mkv", "webm" },
      force = false, -- try displaying the image, even if the terminal does not support it
      markdown = {
        -- enable image viewer for markdown files
        -- if your env doesn't support unicode placeholders, this will be disabled
        enabled = true,
        max_width = 80,
        max_height = 40,
      },
      -- window options applied to windows displaying image buffers
      -- an image buffer is a buffer with `filetype=image`
      wo = {
        wrap = false,
        number = false,
        relativenumber = false,
        cursorcolumn = false,
        signcolumn = "no",
        foldcolumn = "0",
        list = false,
        spell = false,
        statuscolumn = "",
      },
    }
<


==============================================================================
3. Types                                                  *snacks-image-types*

>lua
    ---@alias snacks.image.Size {width: number, height: number}
    ---@alias snacks.image.Pos {[1]: number, [2]: number}
    ---@alias snacks.image.Loc snacks.image.Pos|snacks.image.Size|{zindex?: number}
<

>lua
    ---@class snacks.image.Env
    ---@field name string
    ---@field env table<string, string|true>
    ---@field supported? boolean default: false
    ---@field placeholders? boolean default: false
    ---@field setup? fun(): boolean?
    ---@field transform? fun(data: string): string
    ---@field detected? boolean
<

>lua
    ---@class snacks.image.Opts
    ---@field pos? snacks.image.Pos (row, col) (1,0)-indexed. defaults to the top-left corner
    ---@field width? number
    ---@field min_width? number
    ---@field max_width? number
    ---@field height? number
    ---@field min_height? number
    ---@field max_height? number
<


==============================================================================
4. Module                                                *snacks-image-module*

>lua
    ---@class snacks.image
    ---@field id number
    ---@field ns number
    ---@field buf number
    ---@field opts snacks.image.Opts
    ---@field file string
    ---@field src string
    ---@field augroup number
    ---@field closed? boolean
    ---@field _loc? snacks.image.Loc
    ---@field _state? snacks.image.State
    ---@field _convert uv.uv_process_t?
    ---@field inline? boolean render the image inline in the buffer
    ---@field extmark_id? number
    Snacks.image = {}
<


`Snacks.image.attach()`                                *Snacks.image.attach()*

>lua
    ---@param buf number
    ---@param opts? snacks.image.Opts|{src?: string}
    Snacks.image.attach(buf, opts)
<


`Snacks.image.dim()`                                      *Snacks.image.dim()*

Get the dimensions of a PNG file

>lua
    ---@param file string
    ---@return number width, number height
    Snacks.image.dim(file)
<


`Snacks.image.env()`                                      *Snacks.image.env()*

>lua
    Snacks.image.env()
<


`Snacks.image.markdown()`                            *Snacks.image.markdown()*

>lua
    ---@param buf? number
    Snacks.image.markdown(buf)
<


`Snacks.image.new()`                                      *Snacks.image.new()*

>lua
    ---@param buf number
    ---@param opts? snacks.image.Opts
    Snacks.image.new(buf, src, opts)
<


`Snacks.image.request()`                              *Snacks.image.request()*

>lua
    ---@param opts table<string, string|number>|{data?: string}
    Snacks.image.request(opts)
<


`Snacks.image.supports()`                            *Snacks.image.supports()*

Check if the file format is supported and the terminal supports the kitty
graphics protocol

>lua
    ---@param file string
    Snacks.image.supports(file)
<


`Snacks.image.supports_file()`                  *Snacks.image.supports_file()*

Check if the file format is supported

>lua
    ---@param file string
    Snacks.image.supports_file(file)
<


`Snacks.image.supports_terminal()`                  *Snacks.image.supports_terminal()*

Check if the terminal supports the kitty graphics protocol

>lua
    Snacks.image.supports_terminal()
<


IMAGE:CLOSE()                              *snacks-image-module-image:close()*

>lua
    image:close()
<


IMAGE:CONVERT()                          *snacks-image-module-image:convert()*

>lua
    ---@param file string
    image:convert(file)
<


IMAGE:CREATE()                            *snacks-image-module-image:create()*

create the image

>lua
    image:create()
<


IMAGE:DEBUG()                              *snacks-image-module-image:debug()*

>lua
    image:debug(...)
<


IMAGE:HIDE()                                *snacks-image-module-image:hide()*

>lua
    image:hide()
<


IMAGE:READY()                              *snacks-image-module-image:ready()*

>lua
    image:ready()
<


IMAGE:RENDER_FALLBACK()          *snacks-image-module-image:render_fallback()*

>lua
    ---@param state snacks.image.State
    image:render_fallback(state)
<


IMAGE:RENDER_GRID()                  *snacks-image-module-image:render_grid()*

Renders the unicode placeholder grid in the buffer

>lua
    ---@param loc snacks.image.Loc
    image:render_grid(loc)
<


IMAGE:SET_CURSOR()                    *snacks-image-module-image:set_cursor()*

>lua
    ---@param pos {[1]: number, [2]: number}
    image:set_cursor(pos)
<


IMAGE:STATE()                              *snacks-image-module-image:state()*

>lua
    image:state()
<


IMAGE:UPDATE()                            *snacks-image-module-image:update()*

>lua
    image:update()
<


IMAGE:WINS()                                *snacks-image-module-image:wins()*

>lua
    ---@return number[]
    image:wins()
<

==============================================================================
5. Links                                                  *snacks-image-links*

1. *Image*: https://github.com/user-attachments/assets/4e8a686c-bf41-4989-9d74-1641ecf2835f

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
